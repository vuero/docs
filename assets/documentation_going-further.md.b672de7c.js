import{_ as e,c as n,o as a,a as t}from"./app.6662d0ca.js";const g='{"title":"Going further","description":"","frontmatter":{},"headers":[{"level":2,"title":"Build for production","slug":"build-for-production"},{"level":3,"title":"Using docker","slug":"using-docker"},{"level":3,"title":"Using docker-compose","slug":"using-docker-compose"},{"level":3,"title":"Using Traefik with HTTP/3","slug":"using-traefik-with-http-3"},{"level":2,"title":"Build your own API","slug":"build-your-own-api"},{"level":2,"title":"SSR and SSG","slug":"ssr-and-ssg"},{"level":3,"title":"Server Side Generation","slug":"server-side-generation"},{"level":3,"title":"Server Side Rendering","slug":"server-side-rendering"},{"level":2,"title":"Other backend integration","slug":"other-backend-integration"},{"level":3,"title":"Electron","slug":"electron"},{"level":3,"title":"Laravel","slug":"laravel"},{"level":3,"title":"Django","slug":"django"}],"relativePath":"documentation/going-further.md","lastUpdated":1633498426000}',s={},o=t(`<h1 id="going-further"><a class="header-anchor" href="#going-further" aria-hidden="true">#</a> Going further</h1><h2 id="build-for-production"><a class="header-anchor" href="#build-for-production" aria-hidden="true">#</a> Build for production</h2><p>You can deploy your website on any http server like Apache, Nginx or <a href="https://www.npmjs.com/package/http-server" target="_blank" rel="noopener noreferrer"><code>http-server</code></a> package from npm</p><div class="language-bash"><pre><code><span class="token comment"># using npm</span>
<span class="token function">npm</span> run build

<span class="token comment"># using yarn</span>
<span class="token function">yarn</span> build
</code></pre></div><blockquote><p>Built files are located in ./dist folder</p></blockquote><div class="warning custom-block"><p class="custom-block-title">هشدار</p><p>If you have any errors while building, you may want to check the <a href="./common-issues.html">common issues section</a></p></div><p>You can preview quickly your production version with <a href="https://www.npmjs.com/package/http-server" target="_blank" rel="noopener noreferrer"><code>http-server</code></a></p><div class="language-bash"><pre><code>npx http-server ./dist
</code></pre></div><div class="tip custom-block"><p class="custom-block-title">نکته</p><p>Now you can visit <a href="http://localhost:8080" target="_blank" rel="noopener noreferrer">http://localhost:8080</a> to view your server</p></div><h3 id="using-docker"><a class="header-anchor" href="#using-docker" aria-hidden="true">#</a> Using docker</h3><p>This project includes a Dockerfile which first builds Vuero for production, and then creates a tiny image with only built files, served by Nginx.</p><div class="tip custom-block"><p class="custom-block-title">نکته</p><p>You can also use a CDN like Github pages, Netlify, AWS Cloudfront or any static hosting service ...</p></div><p>To build your image, run the following command:</p><div class="language-bash"><pre><code>docker build <span class="token punctuation">\\</span>
  --tag my-frontend-app:1.0.0 <span class="token punctuation">\\</span>
  <span class="token builtin class-name">.</span>
</code></pre></div><p>To preview your image, run the following command:</p><div class="language-bash"><pre><code>docker run <span class="token punctuation">\\</span>
  --rm <span class="token punctuation">\\</span>
  --publish <span class="token number">8080</span>:8080 <span class="token punctuation">\\</span>
  my-frontend-app:1.0.0
</code></pre></div><blockquote><p>Access the Vuero frontend at <a href="http://localhost:8080" target="_blank" rel="noopener noreferrer">http://localhost:8080</a></p></blockquote><p>To run your image, run the following command:</p><div class="language-bash"><pre><code>docker run <span class="token punctuation">\\</span>
  --detach <span class="token punctuation">\\</span>
  --publish <span class="token number">80</span>:8080 <span class="token punctuation">\\</span>
  --restart unless-stopped <span class="token punctuation">\\</span>
  --name my-frontend-app-container <span class="token punctuation">\\</span>
  my-frontend-app:1.0.0
</code></pre></div><h3 id="using-docker-compose"><a class="header-anchor" href="#using-docker-compose" aria-hidden="true">#</a> Using docker-compose</h3><p>You can use this <code>docker-compose.yml</code> to do the same as above:</p><div class="language-yaml"><pre><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.7&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">my-frontend-service</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">image</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>frontend<span class="token punctuation">-</span>app<span class="token punctuation">:</span>1.0.0
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>frontend<span class="token punctuation">-</span>app<span class="token punctuation">-</span>container
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
     <span class="token punctuation">-</span> <span class="token string">&quot;80:8080&quot;</span>
</code></pre></div><div class="warning custom-block"><p class="custom-block-title">هشدار</p><p>you might need root/sudo access to bind port 80 to the container</p></div><h3 id="using-traefik-with-http-3"><a class="header-anchor" href="#using-traefik-with-http-3" aria-hidden="true">#</a> Using Traefik with HTTP/3</h3><p>HTTP/3 promises to make Internet connections faster, more reliable, and more secure. Born as &quot;HTTP over QUIC&quot;, an effort to adapt the HTTP protocol to run on top of Google&#39;s own transport layer protocol, QUIC, it was later <a href="https://www.infoq.com/news/2015/04/google-quic-ietf-standard/" target="_blank" rel="noopener noreferrer">proposed as an IETF standard</a> and it is currently an <a href="https://datatracker.ietf.org/doc/rfc9000/" target="_blank" rel="noopener noreferrer">Internet Draft</a>.</p><p>Traefik <em>(pronounced traffic)</em> is a modern HTTP reverse proxy and load balancer that makes deploying microservices easy. Since v2.5, HTTP/3 is implemented as an <strong>exerimental feature</strong>.<br> HTTP/3 work only over TLS, fortunately traefik will automaticaly provide certificates trought letsencrypt. <em>(HTTP/2 will be used as fallback if browser does not support HTTP/3)</em></p><p>First we need to create a middleware to redirect http requests to https</p><p><strong>middlewares.yml</strong></p><div class="language-yaml"><pre><code><span class="token key atrule">http</span><span class="token punctuation">:</span>
  <span class="token key atrule">middlewares</span><span class="token punctuation">:</span>
    <span class="token key atrule">https-redirect</span><span class="token punctuation">:</span>
      <span class="token key atrule">redirectScheme</span><span class="token punctuation">:</span>
        <span class="token key atrule">scheme</span><span class="token punctuation">:</span> https
        <span class="token key atrule">permanent</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre></div><p>Then we need to create an empty json file where TLS certificates will be stored</p><p><strong>acme.json</strong></p><div class="language-json"><pre><code><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><div class="warning custom-block"><p class="custom-block-title">هشدار</p><p>The file must have only read access: <code>chmod 600 ./acme.json</code></p></div><p>Now we have to update our <code>docker-compose.yml</code> to add traefik and labels to our containers:</p><div class="language-yaml"><pre><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.7&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">my-frontend-service</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">image</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>frontend<span class="token punctuation">-</span>app<span class="token punctuation">:</span>1.0.0
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>frontend<span class="token punctuation">-</span>app<span class="token punctuation">-</span>container
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> my<span class="token punctuation">-</span>app<span class="token punctuation">-</span>services
    <span class="token key atrule">labels</span><span class="token punctuation">:</span>
      <span class="token key atrule">traefik.enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">traefik.docker.network</span><span class="token punctuation">:</span> <span class="token string">&#39;my-app-services&#39;</span>
      <span class="token key atrule">traefik.http.routers.my-frontend-service.entrypoints</span><span class="token punctuation">:</span> <span class="token string">&#39;http&#39;</span>
      <span class="token key atrule">traefik.http.routers.my-frontend-service.rule</span><span class="token punctuation">:</span> <span class="token string">&#39;Host(\`example.com\`)&#39;</span>
      <span class="token key atrule">traefik.http.routers.my-frontend-service.middlewares</span><span class="token punctuation">:</span> <span class="token string">&#39;https-redirect@file&#39;</span>
      <span class="token key atrule">traefik.http.routers.my-frontend-service-https.rule</span><span class="token punctuation">:</span> <span class="token string">&#39;Host(\`example.com\`)&#39;</span>
      <span class="token key atrule">traefik.http.routers.my-frontend-service-https.tls</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">traefik.http.routers.my-frontend-service-https.entrypoints</span><span class="token punctuation">:</span> <span class="token string">&#39;https&#39;</span>
      <span class="token key atrule">traefik.http.routers.my-frontend-service-https.tls.certresolver</span><span class="token punctuation">:</span> <span class="token string">&#39;http&#39;</span>
      <span class="token key atrule">traefik.http.services.my-frontend-service-https.loadbalancer.server.port</span><span class="token punctuation">:</span> <span class="token number">8080</span>

  <span class="token key atrule">my-traefik</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> traefik<span class="token punctuation">:</span>v2.5
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>traefik<span class="token punctuation">-</span>container
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> my<span class="token punctuation">-</span>app<span class="token punctuation">-</span>services
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;80:80&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;443:443/udp&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;443:443/tcp&quot;</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span> 
      <span class="token punctuation">-</span> TRAEFIK_EXPERIMENTAL_HTTP3=true
      <span class="token punctuation">-</span> TRAEFIK_ENTRYPOINTS_HTTPS_ENABLEHTTP3=true
    <span class="token key atrule">command</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;--experimental.http3=true&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;--providers.docker=true&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;--providers.docker.exposedbydefault=false&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;--providers.file.filename=/middlewares.yml&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;--entrypoints.http.address=:80&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;--entrypoints.https.address=:443&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;--entrypoints.https.enablehttp3=true&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;--certificatesresolvers.http=true&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;--certificatesresolvers.http.acme.email=admin@example.com&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;--certificatesresolvers.http.acme.storage=acme.json&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;--certificatesresolvers.http.acme.httpchallenge=true&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;--certificatesresolvers.http.acme.httpchallenge.entrypoint=http&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;--api.dashboard=false&quot;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock
      <span class="token punctuation">-</span> ./acme.json<span class="token punctuation">:</span>/acme.json
      <span class="token punctuation">-</span> ./middlewares.yml<span class="token punctuation">:</span>/middlewares.yml<span class="token punctuation">:</span>ro

<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">my-app-services</span><span class="token punctuation">:</span>
</code></pre></div><div class="tip custom-block"><p class="custom-block-title">نکته</p><p>You have to update <code>example.com</code> domain with yours to get this working.</p><p>If you want to test on your local computer, you can use <code>127.0.0.1.nip.io</code> as domain, <a href="https://nip.io/" target="_blank" rel="noopener noreferrer">nip.io</a> is a wildcard DNS for any IP Address, Traefik will serve a development certificate then</p></div><p>Start traefik and vuero</p><div class="language-bash"><pre><code>docker-compose up
</code></pre></div><p>And Voil\xE0, you have your vuero served via HTTP/3! You can go to <a href="https://gf.dev/http3-test" target="_blank" rel="noopener noreferrer">https://gf.dev/http3-test</a> to check if your website is served over HTTP/3</p><div class="warning custom-block"><p class="custom-block-title">هشدار</p><p>You might need to enable QUIC protocol in your browser to benefit speed of HTTP/3</p></div><p>Read more about Traefik:</p><ul><li><a href="https://traefik.io/traefik/" target="_blank" rel="noopener noreferrer">https://traefik.io/traefik/</a>.</li><li><a href="https://doc.traefik.io/traefik/" target="_blank" rel="noopener noreferrer">https://doc.traefik.io/traefik/</a>.</li></ul><h2 id="build-your-own-api"><a class="header-anchor" href="#build-your-own-api" aria-hidden="true">#</a> Build your own API</h2><p>To bring your application alive you will need to create a backend for user authentification, data, etc ...<br> We have implemented samples with a fake REST HTTP API to keep the project as simple and understainable as possible.</p><p>You can take a look at projects such <a href="https://strapi.io/" target="_blank" rel="noopener noreferrer">strapi</a> or <a href="https://kuzzle.io/" target="_blank" rel="noopener noreferrer">kuzzle</a>, wich are open-source backend, that can be nicely used with Vuero <em>(<a href="https://firebase.google.com/" target="_blank" rel="noopener noreferrer">firebase</a> can be a good choice too)</em> !</p><h2 id="ssr-and-ssg"><a class="header-anchor" href="#ssr-and-ssg" aria-hidden="true">#</a> SSR and SSG</h2><p>If you want to <strong>improve your SEO scores</strong>, you may need to have Server Side Rendering (or Server Side Generation) like nuxtjs. unfortunately nuxt 3 is not out yet, and so we need to do it by hand.</p><h3 id="server-side-generation"><a class="header-anchor" href="#server-side-generation" aria-hidden="true">#</a> Server Side Generation</h3><p><em>SSG, like gatsby</em></p><p>Vite render HTML content at build time, the output is perfect for SEO and can be hosted in any CDN, so it is the faster way to deliver your content. The caveat is that if you need to deliver dynamic content (such as authenticated access, or shopping search results) your users will receive the static content generated at build time and have to refetch content when browsing like if no SSR/SSG where present.</p><div class="tip custom-block"><p class="custom-block-title">نکته</p><p>For SSG, take a look at <a href="https://github.com/antfu/vite-ssg" target="_blank" rel="noopener noreferrer">https://github.com/antfu/vite-ssg</a></p></div><h3 id="server-side-rendering"><a class="header-anchor" href="#server-side-rendering" aria-hidden="true">#</a> Server Side Rendering</h3><p><em>SSR, like nuxtjs</em></p><p>Vite will generate content on each request, but for that we need to create a web server using nodejs to be able to transfer requests to vite. So each requests will be rendered by vite at runtime even if the content do not change (like a contact page). There is an example in the vite&#39;s playground, which is used to tests vite, about <a href="https://github.com/vitejs/vite/tree/main/packages/playground/ssr-vue" target="_blank" rel="noopener noreferrer">https://github.com/vitejs/vite/tree/main/packages/playground/ssr-vue</a> and the corresponding documentation of this part is here: <a href="https://vitejs.dev/guide/ssr.html#server-side-rendering" target="_blank" rel="noopener noreferrer">https://vitejs.dev/guide/ssr.html#server-side-rendering</a></p><p>Like you saw, it is a more complex approach and so, more expensive to maintain and to host.</p><div class="tip custom-block"><p class="custom-block-title">نکته</p><p>For SSR, take a look at <a href="https://vite-plugin-ssr.com/" target="_blank" rel="noopener noreferrer">https://vite-plugin-ssr.com/</a></p></div><h2 id="other-backend-integration"><a class="header-anchor" href="#other-backend-integration" aria-hidden="true">#</a> Other backend integration</h2><p>Thanks to vitejs, vuero can be used in a lot of different environments like Laravel, Ruby on Rails or any other Framework to build your app.<br><a href="https://vitejs.dev/guide/backend-integration.html" target="_blank" rel="noopener noreferrer">Read more about backend integration on Vite documentation.</a></p><div class="warning custom-block"><p class="custom-block-title">هشدار</p><p>We recommend you to separate your backend project from your frontend (with vuero) on different repositories. Your frontend should only consume the API provided by your backend through Restful API or GraphQL API.</p></div><h3 id="electron"><a class="header-anchor" href="#electron" aria-hidden="true">#</a> Electron</h3><p>If you want to build an <strong>Electron</strong> app, <a href="https://github.com/hocili/vite-electron-typescript-template/" target="_blank" rel="noopener noreferrer">check out <code>vite-electron-typescript-template</code> repository</a> it can help you achieving your goal.</p><h3 id="laravel"><a class="header-anchor" href="#laravel" aria-hidden="true">#</a> Laravel</h3><p>If you want to integrate Vuero with Laravel:</p><ul><li><p>A great tutorial by Sebastian De Deyne on how to fully integrate Laravel with Vite:<br><a href="https://sebastiandedeyne.com/vite-with-laravel/" target="_blank" rel="noopener noreferrer">https://sebastiandedeyne.com/vite-with-laravel/</a></p></li><li><p>A video about how to integrate Laravel with Vite and React (in French): <a href="https://www.youtube.com/watch?v=jyXCbtg743Y" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=jyXCbtg743Y</a></p></li><li><p>And laravel-vite, which is a replacement for Laravel Mix:<br><a href="https://laravel-vite.netlify.app/" target="_blank" rel="noopener noreferrer">https://laravel-vite.netlify.app/</a></p></li></ul><h3 id="django"><a class="header-anchor" href="#django" aria-hidden="true">#</a> Django</h3><ul><li><p>Minimalist example of runing Django with Vite: <a href="https://gist.github.com/lucianoratamero/7fc9737d24229ea9219f0987272896a2" target="_blank" rel="noopener noreferrer">https://gist.github.com/lucianoratamero/7fc9737d24229ea9219f0987272896a2</a></p></li><li><p>A video about how to integrate Django with Vite: <a href="https://www.youtube.com/watch?v=FCyYIVfDkhY" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=FCyYIVfDkhY</a></p></li><li><p>django-vite, an easy to use package: <a href="https://github.com/MrBin99/django-vite" target="_blank" rel="noopener noreferrer">https://github.com/MrBin99/django-vite</a></p></li></ul><div class="tip custom-block"><p class="custom-block-title">نکته</p><p>Vitejs have a lot of plugin available and a great community, read its awesome list here:<br><a href="https://github.com/vitejs/awesome-vite" target="_blank" rel="noopener noreferrer">https://github.com/vitejs/awesome-vite</a></p></div>`,67),r=[o];function p(i,c,l,u,d,k){return a(),n("div",null,r)}var m=e(s,[["render",p]]);export{g as __pageData,m as default};
