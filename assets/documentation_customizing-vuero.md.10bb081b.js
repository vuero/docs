import{_ as s,c as a,o as n,a as e}from"./app.6662d0ca.js";const m='{"title":"سفارشی‌سازی ویوئِرو","description":"","frontmatter":{},"headers":[{"level":2,"title":"Philosophy","slug":"philosophy"},{"level":2,"title":"Hybrid Sass","slug":"hybrid-sass"},{"level":2,"title":"Changing the main color","slug":"changing-the-main-color"},{"level":2,"title":"CSS vars syntax","slug":"css-vars-syntax"},{"level":3,"title":"Declaration","slug":"declaration"},{"level":3,"title":"Usage","slug":"usage"},{"level":2,"title":"Overriding CSS vars","slug":"overriding-css-vars"},{"level":2,"title":"Other Sass files","slug":"other-sass-files"},{"level":2,"title":"Import styles in Vue3","slug":"import-styles-in-vue3"},{"level":2,"title":"Bulma Integration","slug":"bulma-integration"},{"level":2,"title":"Native Dark Mode","slug":"native-dark-mode"},{"level":2,"title":"Dark Mode and CSS vars","slug":"dark-mode-and-css-vars"},{"level":2,"title":"Lazyloading Scss","slug":"lazyloading-scss"},{"level":2,"title":"Vue Components","slug":"vue-components"}],"relativePath":"documentation/customizing-vuero.md","lastUpdated":1632318137000}',t={},o=e(`<h1 id="customizing-vuero"><a class="header-anchor" href="#customizing-vuero" aria-hidden="true">#</a> سفارشی‌سازی ویوئِرو</h1><h2 id="philosophy"><a class="header-anchor" href="#philosophy" aria-hidden="true">#</a> Philosophy</h2><p>Vuero is built to be an extremely modular and flexible product. Layouts have been destructured so you can switch the entire layout live, without reloading the page. Therefore, page inner content is considered as a component that gets injected in the currently active layout.</p><p>Vuero ships with a Quickstarter project. The Quickstarter is a smaller project that contains only what you need to get started with a lighter and less overwhelming codebase. The recommended way of working is to open both projects, and start copying and pasting what you need from the main Vuero project to the Quickstarter project.</p><h2 id="hybrid-sass"><a class="header-anchor" href="#hybrid-sass" aria-hidden="true">#</a> Hybrid Sass</h2><div class="language-jolie"><pre><code>Vuero
<span class="token symbol">|</span><span class="token operator">--</span> src<span class="token operator">/</span>
<span class="token symbol">|</span>   <span class="token symbol">|</span><span class="token operator">--</span> scss
<span class="token symbol">|</span>          <span class="token symbol">|</span><span class="token operator">--</span> abstracts
<span class="token symbol">|</span>          <span class="token symbol">|</span><span class="token operator">--</span> bulma<span class="token operator">-</span>generated
<span class="token symbol">|</span>          <span class="token symbol">|</span><span class="token operator">--</span> components
<span class="token symbol">|</span>          <span class="token symbol">|</span><span class="token operator">--</span> css<span class="token operator">-</span>variables
<span class="token symbol">|</span>          <span class="token symbol">|</span><span class="token operator">--</span> elements
<span class="token symbol">|</span>          <span class="token symbol">|</span><span class="token operator">--</span> extensions
<span class="token symbol">|</span>          <span class="token symbol">|</span><span class="token operator">--</span> layout
<span class="token symbol">|</span>          <span class="token symbol">|</span><span class="token operator">--</span> pages
<span class="token symbol">|</span>          <span class="token symbol">|</span><span class="token operator">--</span> vendors
<span class="token symbol">|</span>          <span class="token symbol">|</span><span class="token operator">--</span> <span class="token keyword">main</span><span class="token punctuation">.</span>scss
<span class="token symbol">|</span>   <span class="token symbol">|</span><span class="token operator">--</span> <span class="token keyword">main</span><span class="token punctuation">.</span>ts
<span class="token symbol">|</span><span class="token operator">--</span> index<span class="token punctuation">.</span>html
</code></pre></div><p>Vuero <code>2.0.0</code> comes with a great paradigm change, in terms of Sass implementation. While everyone is familiar with traditional Sass variables like <code>$color</code>, we chose to drop this format to take advantage of <strong>the power of native <code>CSS-vars</code></strong>. To support this, we had to make several major changes in the way we handle the compilation of the different color palettes.</p><p>The main Bulma framework is built with traditional Sass variables and does not support CSS-vars. We had to find a solution for this. Therefore, we decided to enhance our existing Bulma package with this bulma plugin: <a href="https://github.com/wtho/bulma-css-vars" target="_blank" rel="noopener noreferrer">https://github.com/wtho/bulma-css-vars</a>. This plugin fully supports CSS-vars and patches the initial Bulma code base, making possible this implementation.</p><p>There are 2 new SCSS subfolders in Vuero <code>2.0.0</code>: <code>scss/bulma-generated/</code> و <code>scss/css-variables</code>. The first one is automatically rendered by a NodeJS utility and is in charge of generating all the Bulma variables, based on your configuration.</p><h2 id="changing-the-main-color"><a class="header-anchor" href="#changing-the-main-color" aria-hidden="true">#</a> Changing the main color</h2><p>If you need to change the Vuero main color, you need to go through a short compilation step. The main color is generated from an HSL format. This means that wou will need to deefine your vuero primary color in HSL format for it to work. Here are the different steps you need to go through:</p><ul><li>Choose a primary color for your project. It can be in hex or rgb format, it doesn&#39;t matter. Let&#39;s go for the example with a purple color like <code>#6621cf</code>.</li><li>In any colorpicker of your choice, transform your color into an HSL color with a value for each attribute, Hue, Saturation and Luminance. In our case this would result in <code>264\xB0, 73%, 47%</code>.</li><li>Open <code>vuero/bulma-css-vars.config.js</code>. In that file replace the values of the <code>primary: hsl(153, 48, 49)</code> block with the values you got one step earlier. You can also change the default values of some basic Bulma variables like <code>dark</code>, <code>link</code>, <code>info</code> etc...</li><li>Once you&#39;re done with that, you&#39;re ready to run a utility to generate all your colors.</li><li>In your terminal, run the <code>yarn build:update-bulma-colors</code> or <code>npm build:update-bulma-colors</code>.</li><li>Tada! You are now done and all your new colors have been generated for you.</li></ul><h2 id="css-vars-syntax"><a class="header-anchor" href="#css-vars-syntax" aria-hidden="true">#</a> CSS vars syntax</h2><p>CSS variables use a different syntax than Sass variables. Declaring a new CSS variable is like this:</p><h3 id="declaration"><a class="header-anchor" href="#declaration" aria-hidden="true">#</a> Declaration</h3><div class="language-scss"><pre><code><span class="token comment">// :root is an alias for html element but with higher priority</span>
<span class="token selector">:root </span><span class="token punctuation">{</span>
  <span class="token property">--myVariable</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-scss"><pre><code><span class="token comment">// we can override the variable value inside a class scope</span>
<span class="token selector">.my-red-variable </span><span class="token punctuation">{</span>
  <span class="token property">--myVariable</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-html"><pre><code><span class="token comment">&lt;!-- we can also override the variable value inside a style scope --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token style language-css"><span class="token property">--myVariable</span><span class="token punctuation">:</span> blue</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- ... --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h3><div class="language-scss"><pre><code><span class="token selector">.my-variable-color </span><span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--myVariable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="overriding-css-vars"><a class="header-anchor" href="#overriding-css-vars" aria-hidden="true">#</a> Overriding CSS vars</h2><p>CSS variables are very flexible and can be overriden from almost everywhere, without affecting other components. For example, let&#39;s say that you have a component called <code>&lt;SuperButton&gt;&lt;/SuperButton&gt;</code> and that component has a scoped style attribute (<code>&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</code>), meaning the styles are strictly scoped to that same component. You can override the base <code>--primary</code> variable inside the component without affecting any other one outside the scope of this one. For example, you can do:</p><div class="language-vue"><pre><code><span class="token comment">&lt;!-- SuperButton.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>super-button<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- ... --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scss<span class="token punctuation">&quot;</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.super-button</span> <span class="token punctuation">{</span>
  <span class="token property">--primary</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="other-sass-files"><a class="header-anchor" href="#other-sass-files" aria-hidden="true">#</a> Other Sass files</h2><p>Vuero relies on the powerful Sass features and a modular structure, letting you handle complex styles in a breeze. You need to import all the SCSS partials into your core file. This is how scss files are organized. Partial SCSS file names always start with an underscore like this: <code>_button.scss</code> . They act as chunks of code that you can import only if you need them. Of course some of them are mandatory for the project to work. Vuero is a UI kit in wich each SCSS file serves a different purpose:</p><ul><li><strong>abstracts</strong>: holds all files related to mixins, default global styles and other typography settings.</li><li><strong>components</strong>: holds all files related to Vuero Components. Each component type has its own file.</li><li><strong>Elements</strong>: holds all files related to Vuero Elements. Each element type has its own file.</li><li><strong>layout</strong>: holds all basic and mandatory layout files. The project will break if you ommit one of those files.</li><li><strong>pages</strong>: holds all the specific styles for each demo or group of demos.</li><li><strong>vendors</strong>: holds all vendor CSS styles.</li></ul><h2 id="import-styles-in-vue3"><a class="header-anchor" href="#import-styles-in-vue3" aria-hidden="true">#</a> Import styles in Vue3</h2><p>In order to load stylesheets into our application (e.g if you need to add additional styles from a <code>node_modules</code> plugin), we simply need to import <code>css</code>, <code>sass</code> or <code>scss</code> files in the <code>src/styles.ts</code> file. This file is included in your bundle because it is referenced inside root <code>index.html</code> file</p><div class="language-typescript"><pre><code><span class="token comment">// file: ./src/styles.ts</span>

<span class="token comment">// ...</span>
<span class="token keyword">import</span> <span class="token string">&quot;notyf/notyf.min.css&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string">&quot;./scss/main.scss&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
</code></pre></div><blockquote><p>All imported files here are to be converted in <code>css</code>, and injected automatically in <code>index.html</code> at build and run time. The injected styles are available globally.</p></blockquote><h2 id="bulma-integration"><a class="header-anchor" href="#bulma-integration" aria-hidden="true">#</a> Bulma Integration</h2><p>Classic Bulma used to be fully integrated with Vuero. This meant that when you changed the <code>$primary</code> Vuero color variable, it took precedence over any Bulma related variable. In Vuero <code>2.0.0</code>, things have heavily changed like we discussed above. Vuero is now fully supporting native CSS variables and dropped Sass varibales support.</p><h2 id="native-dark-mode"><a class="header-anchor" href="#native-dark-mode" aria-hidden="true">#</a> Native Dark Mode</h2><p>Vuero comes with a native Dark mode. This means that all components are prestyled for dark mode. You don&#39;t have to worry about it, when you turn it on, the colors change seamlessly. Dark mode styling is made through a global <code>.is-dark</code> class added to the page <code>&lt;html&gt;</code> root element. Dark mode is toggled on the body with javascript. In another type of implementation, the body would have to be rendered by the server with the proper class before being served to the client, based on the user selection.</p><div class="tip custom-block"><p class="custom-block-title">نکته</p><p><code>.is-dark</code> class is not restricted to <code>&lt;html&gt;</code> element, you can add this class to any element, so all childrens will be in dark mode!</p></div><h2 id="dark-mode-and-css-vars"><a class="header-anchor" href="#dark-mode-and-css-vars" aria-hidden="true">#</a> Dark Mode and CSS vars</h2><p>In previous Vuero versions, the dark mode implementation required to have additional nested styles inside a <code>.is-dark</code> class modifier. With the introduction of CSS vars, Dark Mode is now handled at the color level. You can control how a CSS variable behaves at runtime, based on the parent classes. For example let&#39;s says we have a CSS variable like this: <code>--color: red</code>. We can change the value of this color in dark mode by editing the variable, preventing us to write additional dark mode CSS code.</p><div class="language-scss"><pre><code><span class="token comment">// Normal mode</span>
<span class="token selector">:root </span><span class="token punctuation">{</span>
  <span class="token property">--color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Dark mode</span>
<span class="token selector">.is-dark </span><span class="token punctuation">{</span>
  <span class="token property">--color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="lazyloading-scss"><a class="header-anchor" href="#lazyloading-scss" aria-hidden="true">#</a> Lazyloading Scss</h2><div class="language-jolie"><pre><code>Vuero
<span class="token symbol">|</span><span class="token operator">--</span> src<span class="token operator">/</span>
<span class="token symbol">|</span>   <span class="token symbol">|</span><span class="token operator">--</span> components<span class="token operator">/</span>
<span class="token symbol">|</span>          <span class="token symbol">|</span><span class="token operator">--</span> pages<span class="token operator">/</span>
<span class="token symbol">|</span>
</code></pre></div><p>The pages folder holds the template pages as chunks of reusable UI that can be inserted in all available layout types. Each page is a Vue 3 component with a <code>&lt;style&gt;</code> element that holds required SCSS for that page. This way, you do not load unecessary CSS when browsing.</p><p>They are not added by default to <code>main.scss</code>, instead we lazyload them in layouts or directly in pages:</p><div class="language-vue"><pre><code><span class="token comment">&lt;!-- file ./src/pages/status.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// ...</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- ... --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scss<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token comment">/* files imported in components will be loaded only once they are needed */</span>
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">&quot;../scss/abstracts/_mixins.scss&quot;</span><span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">&quot;../scss/pages/generic/_utility.scss&quot;</span><span class="token punctuation">;</span></span>

<span class="token selector">.status-page-wrapper</span> <span class="token punctuation">{</span>
  <span class="token comment">/* custom scss for this page */</span>
  <span class="token selector">&amp;:hover</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--primary<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="vue-components"><a class="header-anchor" href="#vue-components" aria-hidden="true">#</a> Vue Components</h2><p>Vue 3 being very powerful, we built Vuero so you don&#39;t have to worry about moving components from a folder to another or from a project to another. It is as simple as copying and pasting your components in the target folder. Because this project uses the <code>unplugin-vite-components</code>, all your components are parsed and available in your pages and other components without a single import statement. We kept the components CSS out of the <code>.vue</code> files so it is easier for you to explore the template styles and to adapt them to your needs.</p><p>However, we recommend that when you build your own project with Vuero, you take advantage of the <code>.vue</code> files potential by scoping your styles to your component, like we do with the page components. This way, the component styles are only loaded when the component is displayed.</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> type MyComponentColors <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;blue&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;green&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">MyComponentsProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  color<span class="token operator">?</span><span class="token operator">:</span> MyComponentColors
  label<span class="token operator">:</span> string
<span class="token punctuation">}</span>

<span class="token keyword">const</span> props <span class="token operator">=</span> defineProps<span class="token operator">&lt;</span>MyComponentsProps<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[props.color &amp;&amp; \`is-\${props.color}\`]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    {{ props.label }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scss<span class="token punctuation">&quot;</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.button</span> <span class="token punctuation">{</span>
  <span class="token selector">&amp;.is-red</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--red<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector">&amp;.is-blue</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--blue<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector">&amp;.is-green</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--green<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector">&amp;.is-purple</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--purple<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>`,47),p=[o];function l(c,r,i,u,d,k){return n(),a("div",null,p)}var g=s(t,[["render",l]]);export{m as __pageData,g as default};
